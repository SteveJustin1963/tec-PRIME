// Define the maximum number as a constant
50 m !  // Reduced to 50 for easier debugging and to fit in memory

// Allocate memory for the flags array
:X
    m 1+ /A a !  // Allocate m+1 bytes and store the pointer in 'a'
    `Memory allocated at address: ` a , /N
;

// Initialize the flags array
:I
    `Initializing array...` /N
    m 1+ (
        1 a /i + !  // Use word operation instead of byte operation
    )
    `Array initialized.` /N
;

// Sieve of Eratosthenes algorithm
:S
    `Calculating primes up to ` m . `:` /N
    2 n !
    /U (
        n n * m <= /W
        a n + @ (  // Use word operation instead of byte operation
            `.`
            n n * p !
            /U (
                p m <= /W
                0 a p + !  // Use word operation instead of byte operation
                p n + p !
            )
        )
        n 1+ n !
    )
    /N `Sieve completed.` /N
;

// Print the prime numbers
:P
    `Prime numbers found:` /N
    2 n !
    /U (
        n m <= /W
        a n + @ (  // Use word operation instead of byte operation
            n . ` `
        )
        n 1+ n !
    )
    /N
;

// Debug function to print the entire flags array
:D
    `Flags array contents:` /N
    m 1+ (
        a /i + @ .  // Use word operation instead of byte operation
        ` `
    )
    /N
;

// Main function
:M
    X I D S D P
;

// Execute the main function
M
